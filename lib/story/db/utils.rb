module Story
  module DB
    module Utils
      def db_connected?
        @errors ||= []
        begin
          configuration_file = File.exists?('dbconfig.yml') ? 'dbconfig.yml' : File.join(File.dirname(__FILE__), 'config.yml')
          dbconfig = parse_configuration_from configuration_file
          ActiveRecord::Base.logger = Logger.new STDERR
          ActiveRecord::Base.establish_connection dbconfig
          true
        rescue Errno::ENOENT
          @errors.push "Database configuration file not found."
          false
        rescue Errors::DatabaseError => e
          @errors.push e.message
          false
        end
      end

      # [:styles_path=,
      #   :styles_path,
      # :styles_path?,
      # :blog_title=,
      # :blog_title,
      # :blog_title?,
      # :static_ext=,
      # :static_ext,
      # :static_ext?,
      # :title_separator=,
      # :title_separator,
      # :title_separator?,
      # :app_file=,
      # :app_file,
      # :app_file?,
      # :show_exceptions=,
      # :show_exceptions,
      # :show_exceptions?,
      # :environment=,
      # :environment,
      # :environment?,
      # :views=,
      # :views,
      # :views?,
      # :charset=,
      # :charset,
      # :charset?,
      # :sass=,
      # :sass,
      # :sass?,
      # :settings,
      # :routes,
      # :filters,
      # :templates,
      # :errors,
      # :reset!,
      # :extensions,
      # :middleware,
      # :set,
      # :enable,
      # :disable,
      # :error,
      # :not_found,
      # :template,
      # :layout,
      # :inline_templates=,
      # :mime_type,
      # :mime_types,
      # :before,
      # :after,
      # :add_filter,
      # :condition,
      # :public=,
      # :public_dir=,
      # :public_dir,
      # :get,
      # :put,
      # :post,
      # :delete,
      # :head,
      # :options,
      # :patch,
      # :link,
      # :unlink,
      # :helpers,
      # :register,
      # :development?,
      # :production?,
      # :test?,
      # :configure,
      # :use,
      # :quit!,
      # :stop!,
      # :run!,
      # :start!,
      # :running?,
      # :prototype,
      # :new!,
      # :new,
      # :build,
      # :call,
      # :caller_files,
      # :caller_locations,
      # :force_encoding,
      # :raise_errors=,
      # :raise_errors,
      # :raise_errors?,
      # :dump_errors=,
      # :dump_errors,
      # :dump_errors?,
      # :sessions=,
      # :sessions,
      # :sessions?,
      # :logging=,
      # :logging,
      # :logging?,
      # :protection=,
      # :protection,
      # :protection?,
      # :method_override=,
      # :method_override,
      # :method_override?,
      # :use_code=,
      # :use_code,
      # :use_code?,
      # :default_encoding=,
      # :default_encoding,
      # :default_encoding?,
      # :x_cascade=,
      # :x_cascade,
      # :x_cascade?,
      # :add_charset=,
      # :add_charset,
      # :add_charset?,
      # :session_secret=,
      # :session_secret,
      # :session_secret?,
      # :methodoverride?,
      # :methodoverride=,
      # :run=,
      # :run,
      # :run?,
      # :running_server=,
      # :running_server,
      # :running_server?,
      # :handler_name=,
      # :handler_name,
      # :handler_name?,
      # :traps=,
      # :traps,
      # :traps?,
      # :server=,
      # :server,
      # :server?,
      # :bind=,
      # :bind,
      # :bind?,
      # :port=,
      # :port,
      # :port?,
      # :absolute_redirects=,
      # :absolute_redirects,
      # :absolute_redirects?,
      # :prefixed_redirects=,
      # :prefixed_redirects,
      # :prefixed_redirects?,
      # :empty_path_info=,
      # :empty_path_info,
      # :empty_path_info?,
      # :root=,
      # :root,
      # :root?,
      # :reload_templates=,
      # :reload_templates,
      # :reload_templates?,
      # :lock=,
      # :lock,
      # :lock?,
      # :threaded=,
      # :threaded,
      # :threaded?,
      # :public_folder=,
      # :public_folder,
      # :public_folder?,
      # :static=,
      # :static,
      # :static?,
      # :static_cache_control=,
      # :static_cache_control,
      # :static_cache_control?,
      # :yaml_tag,
      # :allocate,
      # :superclass,
      # :json_creatable?,
      # :cattr_reader,
      # :cattr_writer,
      # :cattr_accessor,
      # :class_attribute,
      # :freeze,
      # :===,
      # :==,
      # :<=>,
      # :<,
      # :<=,
      # :>,
      # :>=,
      # :to_s,
      # :inspect,
      # :included_modules,
      # :include?,
      # :name,
      # :ancestors,
      # :instance_methods,
      # :public_instance_methods,
      # :protected_instance_methods,
      # :private_instance_methods,
      # :constants,
      # :const_get,
      # :const_set,
      # :const_defined?,
      # :const_missing,
      # :class_variables,
      # :remove_class_variable,
      # :class_variable_get,
      # :class_variable_set,
      # :class_variable_defined?,
      # :public_constant,
      # :private_constant,
      # :module_exec,
      # :class_exec,
      # :module_eval,
      # :class_eval,
      # :method_defined?,
      # :public_method_defined?,
      # :private_method_defined?,
      # :protected_method_defined?,
      # :public_class_method,
      # :private_class_method,
      # :autoload,
      # :autoload?,
      # :instance_method,
      # :public_instance_method,
      # :psych_yaml_as,
      # :yaml_as,
      # :remove_possible_method,
      # :redefine_method,
      # :delegate,
      # :alias_method_chain,
      # :alias_attribute,
      # :deprecate,
      # :psych_to_yaml,
      # :to_yaml,
      # :to_yaml_properties,
      # :blank?,
      # :present?,
      # :presence,
      # :nil?,
      # :=~,
      # :!~,
      # :eql?,
      # :hash,
      # :class,
      # :singleton_class,
      # :clone,
      # :dup,
      # :taint,
      # :tainted?,
      # :untaint,
      # :untrust,
      # :untrusted?,
      # :trust,
      # :frozen?,
      # :methods,
      # :singleton_methods,
      # :protected_methods,
      # :private_methods,
      # :public_methods,
      # :instance_variables,
      # :instance_variable_get,
      # :instance_variable_set,
      # :instance_variable_defined?,
      # :remove_instance_variable,
      # :instance_of?,
      # :kind_of?,
      # :is_a?,
      # :tap,
      # :send,
      # :public_send,
      # :respond_to?,
      # :extend,
      # :display,
      # :method,
      # :public_method,
      # :define_singleton_method,
      # :object_id,
      # :to_enum,
      # :enum_for,
      # :silence_warnings,
      # :enable_warnings,
      # :with_warnings,
      # :silence_stderr,
      # :silence_stream,
      # :suppress,
      # :capture,
      # :silence,
      # :quietly,
      # :equal?,
      # :!,
      # :!=,
      # :instance_eval,
      # :instance_exec, :__send__, :__id__]

      def sinatra_setting_exists setting
        p settings.instance_eval { self.respond_to? setting }
        !defined?(send Sinatra::Base.settings, setting).is_a? NilClass
      end

      def parse_adapters
        default_adapters = ["jdbc", "fb", "frontbase", "mysql", "openbase", "oci", "postgresql", "sqlite3", "sqlite2", "sqlite", "sqlserver", "sybsql"]
        if sinatra_setting_exists :blog_title and settings.db_adapters.select { |b| b.is_a? (String) }.size > 0 and settings.db_adapters.is_a? (Array)
            default_adapters.concat(settings.db_adapters.each(&:downcase!))
        else default_adapters end
      end

      def some_db_errors_in config
        adapters = parse_adapters
        if !config.has_key?("adapter") or !config.has_key?("database") or !(config.has_key?("adapter") and adapters.include?(config["adapter"].downcase)) then
          @db_error_type = 0 if !(config.has_key?("adapter") and adapters.include?(config["adapter"].downcase))
          @db_error_type = 1 if !config.has_key?("adapter")
          @db_error_type = 2 if !config.has_key?("database")
          @db_error_type = 3 if !config.has_key?("adapter") and !config.has_key?("database")
          true
        else false end
      end

      def parse_configuration_from file
        config = YAML::load File.open file
        error_types = ["unsupported_db_adapter", "no_db_adapter_specified", "no_database_specified", "no_db_adapter_and_database_specified"]
        raise Errors::DatabaseError, send("raise_#{error_types[@db_error_type]}".to_sym, file, config) if some_db_errors_in config
        config
      end
    end
  end
end